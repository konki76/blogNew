<?php

namespace Proxies\__CG__\Acme\UserBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Skill extends \Acme\UserBundle\Entity\Skill implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {
        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Acme\\UserBundle\\Entity\\Skill' . "\0" . 'id', '' . "\0" . 'Acme\\UserBundle\\Entity\\Skill' . "\0" . 'title', '' . "\0" . 'Acme\\UserBundle\\Entity\\Skill' . "\0" . 'publishedAt', '' . "\0" . 'Acme\\UserBundle\\Entity\\Skill' . "\0" . 'skills', '' . "\0" . 'Acme\\UserBundle\\Entity\\Skill' . "\0" . 'slug', '' . "\0" . 'Acme\\UserBundle\\Entity\\Skill' . "\0" . 'startContent', '' . "\0" . 'Acme\\UserBundle\\Entity\\Skill' . "\0" . 'endContent', '' . "\0" . 'Acme\\UserBundle\\Entity\\Skill' . "\0" . 'ordre', '' . "\0" . 'Acme\\UserBundle\\Entity\\Skill' . "\0" . 'users');
        }

        return array('__isInitialized__', '' . "\0" . 'Acme\\UserBundle\\Entity\\Skill' . "\0" . 'id', '' . "\0" . 'Acme\\UserBundle\\Entity\\Skill' . "\0" . 'title', '' . "\0" . 'Acme\\UserBundle\\Entity\\Skill' . "\0" . 'publishedAt', '' . "\0" . 'Acme\\UserBundle\\Entity\\Skill' . "\0" . 'skills', '' . "\0" . 'Acme\\UserBundle\\Entity\\Skill' . "\0" . 'slug', '' . "\0" . 'Acme\\UserBundle\\Entity\\Skill' . "\0" . 'startContent', '' . "\0" . 'Acme\\UserBundle\\Entity\\Skill' . "\0" . 'endContent', '' . "\0" . 'Acme\\UserBundle\\Entity\\Skill' . "\0" . 'ordre', '' . "\0" . 'Acme\\UserBundle\\Entity\\Skill' . "\0" . 'users');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if (! $this->__isInitialized__) {
            $this->__initializer__ = function (Skill $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if (! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };
        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getStartContent()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartContent', array());

        return parent::getStartContent();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartContent($startContent)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartContent', array($startContent));

        return parent::setStartContent($startContent);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndContent()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndContent', array());

        return parent::getEndContent();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndContent($endContent)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndContent', array($endContent));

        return parent::setEndContent($endContent);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getPublishedAt()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublishedAt', array());

        return parent::getPublishedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublishedAt($publishedAt)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublishedAt', array($publishedAt));

        return parent::setPublishedAt($publishedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', array());

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', array($title));

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlug()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlug', array());

        return parent::getSlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlug($slug)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlug', array($slug));

        return parent::setSlug($slug);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrdre()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrdre', array());

        return parent::getOrdre();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrdre($ordre)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrdre', array($ordre));

        return parent::setOrdre($ordre);
    }

    /**
     * {@inheritDoc}
     */
    public function addUser(\Acme\UserBundle\Entity\User $user)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUser', array($user));

        return parent::addUser($user);
    }
}
